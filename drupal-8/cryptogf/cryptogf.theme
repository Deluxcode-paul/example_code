<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

require_once('inc/suggestions.inc');
require_once('inc/preprocess.inc');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cryptogf_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['name'])) {
    unset($form['name']['#description']);
  }
  if (isset($form['pass'])) {
    unset($form['pass']['#description']);
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function cryptogf_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $cryptogf_slogan = theme_get_setting('cryptogf_slogan');
  $form['cryptogf_slogan'] = array(
    '#type' => 'text_format',
    '#format' => (!empty($cryptogf_slogan['format'])) ? $cryptogf_slogan['format'] : 'basic_html',
    '#title' => t('Slogan'),
    '#default_value' => (!empty($cryptogf_slogan['value'])) ? $cryptogf_slogan['value'] : '',
    '#description' => t('Site slogan'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cryptogf_form_comment_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['actions']['preview'])) {
    unset($form['actions']['preview']);
  }
  if (isset($form['actions']['submit'])) {
    $form['actions']['submit']['#value'] = t('Send');
  }
  if (isset($form['comment_body']['widget'][0])) {
    $form['comment_body']['widget'][0]['#format'] = 'restricted_html';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cryptogf_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  if (!empty($form['actions']['submit']['#id']) && strpos($form['actions']['submit']['#id'], 'edit-submit-user-profile-tabs') !== false) {
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'submit_button';
  }
}

/**
 * Implements hook_form_alter().
 */
function cryptogf_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  cryptogf_attach_form_id($form, $form_id);
}

/**
 * Attaches form id to all form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 * @return array
 */
function cryptogf_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    cryptogf_attach_form_id($form[$child], $form_id);
  }
}
